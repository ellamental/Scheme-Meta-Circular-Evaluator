;; (load "/home/trades/Documents/meta/meta-test.chicken")

;; test
;;__________________________________________________________________________;;

(test 1 >>> 1)

;; Single test of expression
(test 
  (+ 1 1) >>> 2)
(test 
  2 >>> (+ 1 1))

;; test multiple expressions
(test 
  1 >>> 1
  2 >>> 2)

(test
  (+ 1 1) >>> 2
  (+ 3 1) >>> 4
  (+ 5 5) >>> 10)

;; test test-environment
(test
  (define a 5) >>> Void
  a >>> 5
  (define a 10) >>> Void
  a >>> 10)



;; define
;;__________________________________________________________________________;;

(test
  ;; Variables
  (define single-variable 5) 
  >>> Void
  single-variable 
  >>> 5
  
  (define lambda-variable
    (lambda (x) x))
  >>> Void
  (lambda-variable 7)
  >>> 7
  
  ;; No argument procedures
  (define (no-arg) 5)
  >>> Void
  (no-arg)
  >>> 5
  
  ;; Fixed arity procedures
  (define (single-arg-func x) x)
  >>> Void
  (single-arg-func 3)
  >>> 3
  
  (define (two-arg-func x y) 
    (+ x y)) 
  >>> Void
  (two-arg-func 35 7) 
  >>> 42
  
  ;; Variable argument functions
  (define (variable-args &args) &args) 
  >>> Void
  (variable-args 1) 
  >>> '(1)
  (variable-args 1 2) 
  >>> '(1 2)
  (variable-args "hello" "world") 
  >>> '("hello" "world")
  
  ;; Required arguments and variable arguments
  (define (var-args-1 one &args) one)
  >>> Void
  (var-args-1 42)
  >>> 42
  (var-args-1 42 84)
  >>> 42
  
  (define (var-args-2 one &args) &args)
  >>> Void
  (var-args-2 1)
  >>> '()
  (var-args-2 1 2)
  >>> '(2)
  (var-args-2 1 2 3)
  >>> '(2 3)
  
  ;; Internal Definitions
  (define x 5) 
  >>> Void
  (define (internal)
    (define x 10)
    x)
  >>> Void
  x
  >>> 5
  (internal)
  >>> 10
  x
  >>> 5
  
  ;; Recursive Procedures
  (define (add1 a-list)
    (if (null? a-list) '()
                       (cons (+ 1 (car a-list)) (add1 (cdr a-list)))))
  >>> Void
  (add1 '(1 2 3))
  >>> '(2 3 4)
  
  ;; Internal Recursive Procedures
  (define (rev a-list)
    (define (rev-loop a-list result)
      (if (null? a-list) result
                         (rev-loop (cdr a-list) (cons (car a-list) result))))
    (rev-loop a-list '()))
  >>> Void
  (rev '(1 2 3))
  >>> '(3 2 1)

;;   ;; Closures
;;   (define (make-counter n)
;;     (lambda ()
;;       (define n (+ n 1))
;;       (- n 1)))
;;   >>> Void
;;   (define counter-1 (make-counter 100))
;;   >>> Void
;;   (define counter-2 (make-counter 50))
;;   >>> Void
;;   (counter-1)
;;   >>> 100
;;   (counter-2)
;;   >>> 50
;;   (counter-1)
;;   >>> 101
;;   (counter-2)
;;   >>> 51
;;   )

)

;; if
;;__________________________________________________________________________;;

(test
  (if 1 1 0)
  >>> 1
  (if False 1 0)
  >>> 0
)


;; lambda
;;__________________________________________________________________________;;
(test
  ;; Assign lambda to variable
  (define a (lambda (x) x))
  >>> Void
  (a 1)
  >>> 1
  
  ;; Call lambda
  ((lambda (x) x) 1)
  >>> 1
  ((lambda (x y) (+ x y)) 5 10)
  >>> 15
)

;; begin
;;__________________________________________________________________________;;
(test
  (begin 1 2)
  >>> 2
  (begin (+ 1 1) 42)
  >>> 42
  
  ;; A more through test
  (define a 5)
  >>> Void
  a
  >>> 5
  (begin (define a 10) 42)
  >>> 42
  a
  >>> 10
)

;; scheme
;; Very simple access to Chicken's eval
;;__________________________________________________________________________;;

(test 
  ;; scheme calls a 100% pure scheme expression directly
  (scheme (+ 1 1))
  >>> 2
  (scheme (cons 1 (cons 2 '())))
  >>> '(1 2)
  
  ;; call-scheme produces a new primitive from a scheme procedure
  ((call-scheme +) 1 2)
  >>> 3
  ((call-scheme car) '(1 2 3))
  >>> 1
  
  ;; scheme-define defines a Scheme primitive procedure using meta arguments.
;;   (scheme-define (l x y) (list-ref x y))
;;   >>> Void
;;   (l '(45 5 3) 1)
;;   >>> 5
  
  
)

;; Make sure error reporting is working.
;; (+ 1 1) != 3 should be the only error reported.
;;__________________________________________________________________________;;

;(test "All Tests Successful!!!" >>> "")

(print "All Tests Successful!!!")

