;;#!/usr/local/bin/csi
;;__________________________________________________________________________;;
;; meta
;; meta.chicken | 2010-08-04
;; (load "~/Documents/meta/meta.chicken")
;; 
;; An interpreter for a Scheme-like language based mostly off the 
;; meta-circular evaluator found in SICP
;; 
;; Recent Changes:
;;
;;
;; TODO:
;; 
;;__________________________________________________________________________;;

;;__________________________________________________________________________;;
;; Booleans and Predicates
;;__________________________________________________________________________;;

(define True #t)
(define False #f)

(define Void 'Void)          ;; Allows define and test to return nothing
(define &args '&args)        ;; Support for variable arity procedures
(define >>> '>>>)            ;; Support for (test exp >>> result)


;;__________________________________________________________________________;;
;; Environments and Frames
;; 
;; Environments consist of two parts, a frame and an enclosing environment.
;; All bindings to variables are stored within the frame
;;__________________________________________________________________________;;

(define the-empty-environment '())
(define (current-environment env) (car env))
(define (enclosing-environment env) (cdr env))

(define (make-frame bindings)
  (alist->hash-table bindings))

(define (add-binding-to-frame! var value frame)
  (hash-table-set! frame var value))

(define (extend-environment bindings base-environment)
  (cons (make-frame bindings) base-environment))


;; Lookup and Set Variables
;;_______________________________________________________;;

(define (lookup-variable-value variable environment)
  (if (eq? environment the-empty-environment)
    (error 'unbound-variable "Unbound variable:  " variable)
    (if (hash-table-exists? (current-environment environment) variable)
        (hash-table-ref (current-environment environment) variable)
        (lookup-variable-value variable (enclosing-environment environment)))))
  
(define (set-variable! variable value environment)
  (add-binding-to-frame! variable value (current-environment environment)))


;;__________________________________________________________________________;;
;; Eval and Apply
;;__________________________________________________________________________;;

;; meta-eval evaluates an expression in an environment
;; meta-eval uses global-syntax-definitions
(define (meta-eval exp env)
  ;(print exp)
  (cond ((or (number? exp) (string? exp) (char? exp) (boolean? exp) (hash-table? exp))
          exp)
        ((symbol? exp)
             (lookup-variable-value exp env))               
        (else
          (let ((name (car exp)))
          (cond ((hash-table-exists? global-syntax-definitions name)
                  ((hash-table-ref global-syntax-definitions name) exp env)) 
                (else (meta-apply (meta-eval (car exp) env)
                                  (eval-arguments (cdr exp) env))))))))

;; eval-arguments evaluates each expression in exps and returns a list of 
;; the values.  It is used to supply a list of values to meta-apply.
(define (eval-arguments exps env)
  (if (null? exps)
      '()
      (cons (meta-eval (car exps) env)
            (eval-arguments (cdr exps) env))))

;; eval-sequence evaluates all expressions in order and returns the value
;; of the last expression evaluated.  It is used by meta-apply and begin.
(define (eval-sequence expressions env)
  (if (null? (cdr expressions)) (meta-eval (car expressions) env)
                                (begin
                                  (meta-eval (car expressions) env)
                                  (eval-sequence (cdr expressions) env))))

(define (meta-apply procedure arguments) 
  (let ((type (car procedure)))
  (cond ((eq? type 'primitive)
          (apply (cdr procedure) arguments))
        ((eq? type 'procedure)
          (eval-sequence (caddr procedure)
                         (extend-environment (assign-values procedure arguments)
                                             (cadddr procedure)))))))


(define (assign-values procedure val-list)
  (define args (cadr procedure))
  (define length-diff (- (length val-list) (length args)))
  
  (define (car-pair x y) (cons (car x) (car y)))
  
  (define (handle-&args args vals result)
    (if (equal? (car args) &args)
        (cons (cons (car args) vals) result)
        (handle-&args (cdr args) (cdr vals) (cons (car-pair args vals) result)))) 
  
  (cond ((member &args args)
          (if (< length-diff -1) 
              (error 'arity "Too few arguments")
              (handle-&args args val-list '())))
        ((zero? length-diff)
          (map cons args val-list))
        ((negative? length-diff)
          (error 'arity "Too few arguments"))
        ((positive? length-diff)
          (error 'arity "Too many arguments"))))


;;__________________________________________________________________________;;
;; Setup the Global Environment
;;__________________________________________________________________________;;

;; Global Syntax Definitions
(define global-syntax-definitions (make-hash-table))

(define (set-syntax! name exp)
  (hash-table-set! global-syntax-definitions name exp))

;; (scheme-syntax name (scheme-lambda (exp env) body))
(hash-table-set! global-syntax-definitions 'scheme-syntax
  (lambda (exp env)
    (set-syntax! (cadr exp)                    ;; name
                 (eval (caddr exp)))))         ;; procedure


;; Global Variable Definitions
(define the-global-environment (extend-environment '() the-empty-environment))

;; load (meta-load)
;; This must be defined here to load primitives before the REPL
(define (meta-load filename)
  (define f (open-input-file filename))
  (define (read-loop)
    (let ((e (read f)))
      (if (equal? e #!eof) "Successfully Loaded!"
                           (begin
                             (meta-eval e the-global-environment)
                             (read-loop)))))
  (read-loop))
(set-variable! 'load (cons 'primitive meta-load) the-global-environment)

;;__________________________________________________________________________;;
;; REPL
;;__________________________________________________________________________;;

(define (REPL)
  (display ": ")
  (define input (read))
  (define output ;(condition-case 
    (meta-eval input the-global-environment)
;;                    ((exn arity) (begin (print "Error: Arity") (REPL)))
;;                    ((exn unbound-variable) (begin (print "Unbound-variable") (REPL)))
;;                    ((exn) (begin (print "Error:") (REPL))))
    )
  (if (eq? output Void) (REPL)
                        (print output))
  (REPL))


;; Load primitive syntax definitions (quote define lambda if ...)
(meta-load "~/Documents/meta/meta-syntax.chicken")

;; Load primitive functions (True False equal? cons car cdr + - ...)
(meta-load "~/Documents/meta/meta-primitives.chicken")

;; Load the test suite to make sure everything still works
(meta-load "~/Documents/meta/meta-test.chicken")

;; Start the REPL.  Comment out for debugging or using as a library
(REPL)


  
