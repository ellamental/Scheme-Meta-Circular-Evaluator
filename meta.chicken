;;#!/usr/local/bin/csi
;;__________________________________________________________________________;;
;; meta
;; meta.chicken | 2010-08-04
;; (load "~/Documents/meta/meta.chicken")
;; 
;; An interpreter for a Scheme-like language based mostly off the 
;; meta-circular evaluator found in SICP
;; 
;; Recent Changes:
;;
;;
;; TODO:
;; 
;;__________________________________________________________________________;;


;;__________________________________________________________________________;;
;; Type System
;; 
;; Each object is a cons cell with the (car = type) (cdr = data).
;; This is subject to change considerably.  Use the type operators 
;; type, type?, object-data and make-type exclusivley to interact with types.
;;__________________________________________________________________________;;



(define (make-type type expression)
  (cons type expression))

(define (type object)
  (car object))

(define (type? object quoted-type)
  (equal? (type object) quoted-type))

(define (object-data object)
  (cdr object))

;;__________________________________________________________________________;;
;; Booleans and Predicates
;;__________________________________________________________________________;;

(define Void 'Void)

(define True 'True)
(define False 'False)
(define (true? exp) (not (eq? exp False)))
(define (false? exp) (eq? exp False))

(define (self-evaluating? expression)
  (or (number? expression) (string? expression)))

(define (variable? expression)
  (symbol? expression))

;;__________________________________________________________________________;;
;; Eval and Apply
;;__________________________________________________________________________;;


(define (meta-eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((type? exp 'quote) (cadr exp))
        ((type? exp 'define) (eval-definition exp env))
        ((type? exp 'if) (eval-if exp env))
        ((type? exp 'lambda) (list 'procedure (cadr exp) (cddr exp) env))
        ((type? exp 'begin) (eval-sequence (cdr exp) env))
    ))

(define (eval-sequence expressions env)
  (if (null? (cdr expressions)) (meta-eval (car expressions) env)
                                (begin
				  (meta-eval (car expressions) env)
                                  (eval-sequence (cdr expressions) env))))

(define (apply exp env) 
  (void))


(define (eval-definition exp env)
  (let ((var (if (symbol? (cadr exp)) (cadr exp) (caadr exp)))
	(val (if (symbol? (cadr exp)) (caddr exp) "make-lambda not implemented")))
  (set-variable! var
                 (meta-eval val env)
                  env))
  Void)

(define (eval-if exp env)
  (if (true? (meta-eval (cadr exp) env))
      (meta-eval (caddr exp) env)
      (meta-eval (cadddr exp) env)))




;;__________________________________________________________________________;;
;; Environments and Frames
;; 
;; Environments consist of two parts, a frame and an enclosing environment.
;; All bindings to variables are stored within the frame
;;__________________________________________________________________________;;

(define the-empty-environment '())
(define (current-environment env) (car env))
(define (enclosing-environment env) (cdr env))

(define (make-frame bindings)
  (alist->hash-table bindings))

(define (add-binding-to-frame! var value frame)
  (hash-table-set! frame var value))

(define (extend-environment bindings base-environment)
  (cons (make-frame bindings) base-environment))


;; Lookup and Set Procedures
;;_______________________________________________________;;

(define (lookup-variable-value variable environment)
  (if (eq? environment the-empty-environment)
    (print "Unbound variable:  " variable)
    (if (hash-table-exists? (current-environment environment) variable)
        (hash-table-ref (current-environment environment) variable)
        (lookup-variable-value variable (enclosing-environment environment)))))
  
(define (set-variable! variable value environment)
  (add-binding-to-frame! variable value (current-environment environment)))




;;__________________________________________________________________________;;
;; Setup the Global Environment
;;__________________________________________________________________________;;

(define primitives '())

(define (setup-environment)
  (let ((initial-env (extend-environment primitives the-empty-environment)))
    (set-variable! 'True True initial-env)
    (set-variable! 'False False initial-env)
    (set-variable! 'the-empty-list '() initial-env)
    (set-variable! 'Void Void initial-env)
    initial-env))

(define the-global-environment (setup-environment))

;;__________________________________________________________________________;;
;; REPL
;;__________________________________________________________________________;;


(define (REPL)
  (display ": ")
  (let ((input (read)))
    (let ((output (meta-eval input the-global-environment)))
      (if (eq? output Void) (REPL)
	                    (user-print output))))
  (REPL))

(define (user-print object)
  (print object))


;; Comment out (REPL) for debugging or using as a library
;(REPL)

