(scheme-syntax scheme 
  (lambda (exp env) 
    (eval (cadr exp))))

(scheme-syntax call-scheme 
  (lambda (exp env)
    (cons 'primitive
          (eval (cadr exp)))))

(scheme-syntax quote
  (lambda (exp env) (cadr exp)))

(scheme-syntax define
  (lambda (exp env)
    (define (eval-lambda-definition)
      (let ((name (caadr exp))
            (args (cdadr exp))
            (body (cddr exp)))
        (set-variable! name (list 'procedure args body env) env)))
    (if (symbol? (cadr exp))
      (set-variable! (cadr exp) (meta-eval (caddr exp) env) env)
      (eval-lambda-definition))
    Void))

(scheme-syntax if
  (lambda (exp env)
    (if (meta-eval (cadr exp) env)
        (meta-eval (caddr exp) env)
        (meta-eval (cadddr exp) env))))

(scheme-syntax lambda
  (lambda (exp env)
    (list 'procedure (cadr exp) (cddr exp) env)))


(scheme-syntax begin
  (lambda (exp env) (eval-sequence (cdr exp) env)))


(scheme-syntax test
  (lambda (exp env)
    (define test-environment (extend-environment '() env))
    (define (test-loop expr)
      (if (null? expr) Void
          (begin
            (test-expr expr)
            (test-loop (cdddr expr)))))
    (define (test-expr expression)
      (let ((test-val (meta-eval (car expression) test-environment))
            (expected (meta-eval (caddr expression) test-environment)))
        (if (equal? test-val expected)
            #t
            (print "#---------Error---------#" #\newline
                   (car expression) #\newline
                   "!= " (caddr expression)))))
    (test-loop (cdr exp))))

(scheme-syntax eval
  (lambda (exp env)
    (meta-eval (cadr exp) env)))



(scheme-syntax syntax
  (lambda (exp env)
    (set-syntax! (cadr exp)
                 (lambda (expr envi) 
                   (print (list (caddr exp) expr envi) envi))))) 
  

;; (scheme-syntax syntax
;;   (lambda (binding-exp binding-env)
;;     (define meta-binding-expr (caddr binding-exp))
;;     (define evld (meta-eval (list meta-binding-expr exp
;; (or 1 2)
;; (syntax or 
;;   (lambda (exp env)
;;     (if (cadr exp) (cadr exp)
;;                    (if (caddr exp) (caddr exp)
;;                                    False))))

;; (scheme-syntax syntax
;;   (lambda (exp env)
;;     (set-syntax! (cadr exp)
;;                  (lambda (expr env)
;;                    (meta-eval (list (caddr exp) exp env) env)))))

;; (meta-eval (caddr exp) env)
;; 
;; (lambda (exp env)
;;   (define meta-lambda 

;;     
;; (scheme-syntax meta-lambda
;;   (lambda (exp env)
;;     (meta-eval (list 'lambda (cadr exp) (caddr exp)) env)))
;;     
;;     
;; (scheme-syntax call-meta-lambda
;;   (lambda (exp env)
;;     (print (list (cadr exp) (cdr exp)) env)))
;; 
;; 
;; (scheme-syntax test
;;   (define meta-lambda 
;;   (call-scheme (lambda (exp env) (meta-eval (list (caddr exp) exp env) env))
;; 


;; (and 1 2 3)
;; (lambda (exp env) 


;; (scheme-syntax code
;;   (lambda (exp env)
;;     (define name (cadr exp))
;;     (define code (caddr exp))
;;     (print name #\newline code)
;;     (define procedure (meta-eval code env))
;;     (print procedure)
;;     ))

      